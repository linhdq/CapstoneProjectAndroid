/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <stdio.h>
#include <vector>
#include <iostream>
#include <stdlib.h>
#include <math.h>
#include <algorithm>
#include <opencv2/opencv.hpp>
/* Header for class com_vn_linhdq_jnisample_OpenCVNative */

using namespace std;
using namespace cv;

#ifndef _Included_com_ldz_fpt_businesscardscannerandroid_opencv_OpenCVNative
#define _Included_com_ldz_fpt_businesscardscannerandroid_opencv_OpenCVNative
#ifdef __cplusplus
extern "C" {
#endif

bool keep_box(std::vector<cv::Point> contour);
bool connected(std::vector<cv::Point> contour);
float pix_intensity(int x, int y);
std::vector<cv::Point> get_contour(int index);
int get_parent(int index);
bool is_child(int index);
bool keep(std::vector<cv::Point> contour);
int count_childs(int index, std::vector<cv::Point> contour);
bool include_box(int index, std::vector<cv::Point> contour);
double cal_median(double daArray[], int iSize);
double median_mat(Mat channel );
void find_squares(cv::Mat& image, std::vector<std::vector<cv::Point> >&squares);
void find_largest_square(const std::vector<std::vector<cv::Point> >& squares, std::vector<Point>& biggest_square);
double angle( cv::Point pt1, cv::Point pt2, cv::Point pt0 );
std::vector<cv::Rect> detectLetters(cv::Mat img);

JNIEXPORT void JNICALL Java_com_ldz_fpt_businesscardscannerandroid_opencv_OpenCVNative_convertGray
        (JNIEnv *, jclass, jlong, jlong);

JNIEXPORT jfloatArray JNICALL Java_com_ldz_fpt_businesscardscannerandroid_opencv_OpenCVNative_detectCardVisit
        (JNIEnv *, jclass, jlong);

JNIEXPORT void JNICALL Java_com_ldz_fpt_businesscardscannerandroid_opencv_OpenCVNative_increaseContrast
        (JNIEnv *, jclass, jlong, jlong);
JNIEXPORT jintArray JNICALL Java_com_ldz_fpt_businesscardscannerandroid_opencv_OpenCVNative_detectTextBlock
        (JNIEnv *, jclass, jlong);
JNIEXPORT void JNICALL Java_com_ldz_fpt_businesscardscanner_opencvandroid_OpenCVNative_cropMat
        (JNIEnv *, jclass, jlong, jlong, jint, jint, jint, jint);

#ifdef __cplusplus
}
#endif
#endif
